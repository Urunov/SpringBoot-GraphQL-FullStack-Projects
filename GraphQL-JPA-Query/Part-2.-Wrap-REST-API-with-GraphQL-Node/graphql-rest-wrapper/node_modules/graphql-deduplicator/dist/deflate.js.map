{"version":3,"sources":["../src/deflate.js"],"names":["deflate","node","index","path","Array","isArray","map","childNode","id","__typename","route","join","fieldNames","Object","keys","result","fieldName","value","concat","response"],"mappings":";;;;;;;AAIA;AACA,MAAMA,OAAO,GAAG,CAACC,IAAD,EAAiBC,KAAjB,EAAgCC,IAAhC,KAA2E;AACzF,MAAIC,KAAK,CAACC,OAAN,CAAcJ,IAAd,CAAJ,EAAyB;AACvB,WAAOA,IAAI,CAACK,GAAL,CAAUC,SAAD,IAAe;AAC7B,UAAI,OAAOA,SAAP,KAAqB,QAArB,IAAiC,OAAOA,SAAP,KAAqB,QAAtD,IAAkE,OAAOA,SAAP,KAAqB,SAA3F,EAAsG;AACpG,eAAOA,SAAP;AACD,OAFD,MAEO;AACL,eAAOP,OAAO,CAACO,SAAD,EAAYL,KAAZ,EAAmBC,IAAnB,CAAd;AACD;AACF,KANM,CAAP;AAOD,GARD,MAQO;AACL,QAAIF,IAAI,IAAIA,IAAI,CAACO,EAAb,IAAmBP,IAAI,CAACQ,UAA5B,EAAwC;AACtC,YAAMC,KAAK,GAAGP,IAAI,CAACQ,IAAL,CAAU,GAAV,CAAd;;AAEA,UAAIT,KAAK,CAACQ,KAAD,CAAL,IAAgBR,KAAK,CAACQ,KAAD,CAAL,CAAaT,IAAI,CAACQ,UAAlB,CAAhB,IAAiDP,KAAK,CAACQ,KAAD,CAAL,CAAaT,IAAI,CAACQ,UAAlB,EAA8BR,IAAI,CAACO,EAAnC,CAArD,EAA6F;AAC3F,eAAO;AACL;AACAC,UAAAA,UAAU,EAAER,IAAI,CAACQ,UAFZ;AAGLD,UAAAA,EAAE,EAAEP,IAAI,CAACO;AAHJ,SAAP;AAKD,OAND,MAMO;AACL,YAAI,CAACN,KAAK,CAACQ,KAAD,CAAV,EAAmB;AACjBR,UAAAA,KAAK,CAACQ,KAAD,CAAL,GAAe,EAAf;AACD;;AAED,YAAI,CAACR,KAAK,CAACQ,KAAD,CAAL,CAAaT,IAAI,CAACQ,UAAlB,CAAL,EAAoC;AAClCP,UAAAA,KAAK,CAACQ,KAAD,CAAL,CAAaT,IAAI,CAACQ,UAAlB,IAAgC,EAAhC;AACD;;AAEDP,QAAAA,KAAK,CAACQ,KAAD,CAAL,CAAaT,IAAI,CAACQ,UAAlB,EAA8BR,IAAI,CAACO,EAAnC,IAAyC,IAAzC;AACD;AACF;;AACD,UAAMI,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYb,IAAZ,CAAnB;AACA,UAAMc,MAAM,GAAG,EAAf;;AACA,SAAK,MAAMC,SAAX,IAAwBJ,UAAxB,EAAoC;AAClC,YAAMK,KAAK,GAAGhB,IAAI,CAACe,SAAD,CAAlB;;AAEA,UAAIZ,KAAK,CAACC,OAAN,CAAcY,KAAd,KAAwB,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAAnE,EAAyE;AACvEF,QAAAA,MAAM,CAACC,SAAD,CAAN,GAAoBhB,OAAO,CAACiB,KAAD,EAAQf,KAAR,EAAeC,IAAI,CAACe,MAAL,CAAY,CAACF,SAAD,CAAZ,CAAf,CAA3B;AACD,OAFD,MAEO;AACLD,QAAAA,MAAM,CAACC,SAAD,CAAN,GAAoBC,KAApB;AACD;AACF;;AAED,WAAOF,MAAP;AACD;AACF,CA7CD;;eA+CgBI,QAAD,IAAsB;AACnC,QAAMjB,KAAK,GAAG,EAAd;AAEA,SAAOF,OAAO,CAACmB,QAAD,EAAWjB,KAAX,EAAkB,EAAlB,CAAd;AACD,C","sourcesContent":["// @flow\n\ntype NodeType = Object | $ReadOnlyArray<NodeType>;\n\n// eslint-disable-next-line complexity\nconst deflate = (node: NodeType, index: Object, path: $ReadOnlyArray<string>): NodeType => {\n  if (Array.isArray(node)) {\n    return node.map((childNode) => {\n      if (typeof childNode === 'string' || typeof childNode === 'number' || typeof childNode === 'boolean') {\n        return childNode;\n      } else {\n        return deflate(childNode, index, path);\n      }\n    });\n  } else {\n    if (node && node.id && node.__typename) {\n      const route = path.join(',');\n\n      if (index[route] && index[route][node.__typename] && index[route][node.__typename][node.id]) {\n        return {\n          // eslint-disable-next-line id-match\n          __typename: node.__typename,\n          id: node.id,\n        };\n      } else {\n        if (!index[route]) {\n          index[route] = {};\n        }\n\n        if (!index[route][node.__typename]) {\n          index[route][node.__typename] = {};\n        }\n\n        index[route][node.__typename][node.id] = true;\n      }\n    }\n    const fieldNames = Object.keys(node);\n    const result = {};\n    for (const fieldName of fieldNames) {\n      const value = node[fieldName];\n\n      if (Array.isArray(value) || typeof value === 'object' && value !== null) {\n        result[fieldName] = deflate(value, index, path.concat([fieldName]));\n      } else {\n        result[fieldName] = value;\n      }\n    }\n\n    return result;\n  }\n};\n\nexport default (response: Object) => {\n  const index = {};\n\n  return deflate(response, index, []);\n};\n"],"file":"deflate.js"}